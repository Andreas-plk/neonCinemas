datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Movie {
  Id     String @id @default(cuid()) // δικο μου id
  tmdbId Int    @map("id") // id από TMDB

  // βασικά TMDB πεδία
  adult            Boolean
  backdropPath     String?   @map("backdrop_path")
  posterPath       String?   @map("poster_path")
  title            String
  originalTitle    String    @map("original_title")
  originalLanguage String    @map("original_language")
  overview         String?
  releaseDate      DateTime? @map("release_date")
  runtime          Int?
  status           String?
  tagline          String?
  popularity       Float?
  voteAverage      Float?    @map("vote_average")
  voteCount        Int?      @map("vote_count")
  video            Boolean

  // δικα μου πεδία
  playingNow Boolean     @default(false)
  screenings Screening[]
  trailer    Trailer?
  reviews    Review[]
  genres     Genre[]     @relation("MovieGenres")
}

model Genre {
  id     Int     @id
  name   String
  movies Movie[] @relation("MovieGenres")
}

model Screening {
  id       String    @id @default(cuid())
  time     DateTime
  movieId  String
  bookings Booking[]
  cinemaId String
  cinema   Cinema    @relation(fields: [cinemaId], references: [id])
  movie    Movie     @relation(fields: [movieId], references: [Id])
  Room     Room      @relation(fields: [roomId], references: [id])
  roomId   String
}

model Booking {
  id            String    @id @default(cuid())
  screeningId   String
  screening     Screening @relation(fields: [screeningId], references: [id])
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  selectedSeats String[]
  createdAt     DateTime  @default(now())
}

model Cinema {
  id         String      @id @default(cuid())
  name       String
  locatiion  String
  rooms      Room[]
  screenings Screening[]
}

model Room {
  id          String      @id @default(cuid())
  name        String
  rows        Int
  seatsPerRow Int
  sections    Int
  cinemaId    String
  cinema      Cinema      @relation(fields: [cinemaId], references: [id])
  screenings  Screening[]
}

model Trailer {
  id        String    @id @default(cuid())
  key       String
  site      String
  type      String?
  official  Boolean?
  published DateTime?

  movieId String @unique
  movie   Movie  @relation(fields: [movieId], references: [Id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  author    String
  content   String
  createdAt DateTime @default(now())

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [Id])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
  theme    = "forest"
}
